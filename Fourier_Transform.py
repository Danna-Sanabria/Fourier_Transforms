# -*- coding: utf-8 -*-
"""TRANSFORMADAS DE FOURIER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SWrNaPKK4hSWuWjtRdfzXWzNAGRYnj81
"""

import numpy as np
import matplotlib.pyplot as plt

t = np.linspace(0,1.5,1000)
f = [1,1]
a = [4/np.pi,1/3]

y = a[0] * np.sin((2* np.pi) * f[0] * t ) + a[1] * np.sin((2* np.pi) * f[1] * t )


plt.Figure(figsize=(8,6))
plt.plot(t,y,"g")
plt.xlabel("Time")
plt.ylabel("Amplitud")
plt.title("SEÑAL DE NYQUIST")
plt.axhline(y=0, color="k")

"""#FOURIER ANALISIS IN SIGNAL PROCESSING

"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.fftpack import fft, ifft

sr = 100                     #Sampling rate (HZ)
ts = 1/sr                     #Sampling interval (s)
t = np.arange(0,1,ts)         #Distancia entre dos valores adyacentes
f = [1,4,7]
a = [3,1,0.5]

y = a[0] * np.sin((2* np.pi) * f[0] * t ) + a[1] * np.sin((2* np.pi) * f[1] * t ) + a[2] * np.sin((2* np.pi) * f[2] * t )

plt.Figure(figsize=(8,6))
plt.plot(t,y,"g")
plt.xlabel("Time")
plt.ylabel("Amplitud")
plt.title("SEÑAL EN EL DOMINIO DE TIEMPO (x(t) = A sin (2πft)):")
plt.axhline(y=0, color="k")

print(f"sampling rate / tasa de intervalo: {sr}")
print(f"Sampling interval: {ts}")

X = fft(y)                          # Fourier fast transform
#print(f"Lenght X:  {len(X)}")
X[0]
#print(f"Array X:  {X}")

N = len(X)                          #FFT computing --> array of size 1000
n = np.arange(N)                    #Create a array int of length
T = N/sr                            #Sampling interval

print(f"time period: {T}")
print (f"n: {n}")
frecuency = n/T
print(f"Frecuency array : {frecuency}")

"""##SIGNAL IN THE TIME DOMAIN WITH POWER"""

import warnings
warnings.filterwarnings("ignore")

plt.figure(figsize = (20,6))
plt.subplot(121)
plt.stem(frecuency, np.abs(X), markerfmt=":", basefmt="tab:blue")                           #genera una etiqueta indicando hasta que parte va la representacion de la funcion
plt.xlim(0,10)
plt.xlabel("Frecuency(Hz)")
plt.ylabel("FFT Amplitude")

plt.subplot(122)
plt.plot(t, ifft(X), "tab:pink")
plt.xlabel("Frecuency(Hz)")
plt.ylabel("Time(s)")
plt.axhline(y=0, color = 'k')

plt.show()